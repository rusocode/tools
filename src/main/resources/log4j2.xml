<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>

<!-- Configura el logger utilizando el nivel de eventos internos en "WARN" para registrar los mensajes 
	en consola. -->
<Configuration status="warn" strict="true">

	<!-- El Layout es responsable de dar formato al LogEvent de acuerdo con los deseos del usuario, mientras 
		que un appender se encarga de enviar la salida formateada a su destino. PatternLayout, parte de la distribución 
		estándar de log4j, permite al usuario especificar el formato de salida de acuerdo con patrones de conversión 
		similares a la función printf del lenguaje C. -->

	<!-- Por ejemplo, PatternLayout con el patrón de conversión "%r [%t] %-5p %c - %m%n" generará algo similar 
		a: 176 [main] INFO org.foo.Bar - Located nearest gas station -->

	<Properties>
		<Property name="LOG_DIR">target/logs</Property>
	</Properties>

	<!-- Anexadores (destino de salida) -->
	<Appenders>

		<!-- Salida en consola -->
		<Console name="SysOut" target="SYSTEM_OUT">
			<PatternLayout pattern="[%d{HH:mm:ss}] [%c{1} thread/%level]: %msg%n" />
		</Console>

		<!-- Salida en archivo con renovacion. "Vimos una mejora del rendimiento del 20-200% en comparación 
			con RollingFileAppender con "bufferedIO=true" en nuestras mediciones." -->
		<RollingRandomAccessFile name="File" fileName="${LOG_DIR}/latest.log"
			filePattern="${LOG_DIR}/%d-%i.log.gz">
			<!-- Patron de conversion. En el especificador de conversion "%-5p", -5 es el modificador de formato 
				y p es el caracter de conversion. %d, %p, etc. son especificadores de conversion y las letras son caracteres 
				de conversion. -->
			<PatternLayout pattern="[%d{HH:mm:ss}] [%c{1} thread/%level]: %msg%n" />
			<!-- Politicas de renovacion -->
			<Policies>
				<!-- Solo tiene que ir una politica <TimeBasedTriggeringPolicy /> <OnStartupTriggeringPolicy /> -->
				<!-- Cada 10KB se renueva el archivo -->
				<SizeBasedTriggeringPolicy size="10 KB" />
			</Policies>
		</RollingRandomAccessFile>

	</Appenders>

	<!-- Configura los loggers para cada appender -->
	<Loggers>

		<!-- Nivel raiz para configurar todos los appenders. Cada configuración debe tener un root logger. -->
		<Root level="all">
			<!-- Cada appender debe tener un atributo name especifico con un valor que sea unico dentro del conjunto 
				de appenders. Los loggers utilizaran el nombre para hacer referencia al appender. -->
			<AppenderRef ref="SysOut" />
			<AppenderRef ref="File" />
		</Root>

		<!-- Configura un appender en especifico <Logger name="log" level="debug"> <AppenderRef ref="File" 
			/> </Logger> -->

	</Loggers>

</Configuration>
